{"version":3,"sources":["firebaseApp.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseInstance","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","password","setPassword","error","setError","email","setEmail","newAccount","setNewAccount","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","setTimeout","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onClickDel","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","autoFocus","src","alt","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","reponse","getDownloadURL","tweetInfo","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","tweetArray","docs","map","data","marginTop","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","Router","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8f26ff9.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'firebase/storage'\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n}\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\n\nexport const firebaseInstance = firebase\n\nexport const authService = firebase.auth()\n\nexport const dbService = firebase.firestore()\n\nexport const storageService = firebase.storage()\n\nexport default firebaseApp\n","import React, { useState } from 'react'\nimport { authService } from '../firebaseApp'\n\nconst AuthForm = () => {\n  // State (상태관리)\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState('')\n  const [email, setEmail] = useState('')\n  const [newAccount, setNewAccount] = useState(true)\n\n  // #. 이메일, 비밀번호 Input 값 실시간 변경\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event\n    if (name === 'email') {\n      setEmail(value)\n    } else if (name === 'password') {\n      setPassword(value)\n    }\n  }\n\n  // #. 이메일, 비밀번호 Submit 시 로그인 / 회원가입\n  const onSubmit = async (event) => {\n    event.preventDefault()\n    try {\n      if (newAccount) {\n        await authService.createUserWithEmailAndPassword(email, password)\n      } else {\n        await authService.signInWithEmailAndPassword(email, password)\n      }\n    } catch (error) {\n      setError(error.message)\n      setTimeout(() => {\n        setError('')\n      }, 5000)\n    }\n    setPassword('')\n  }\n\n  // #. 로그인 / 회원가입 변경 버튼\n  const toggleAccount = () => setNewAccount((prev) => !prev)\n\n  return (\n    <>\n      <form onSubmit={onSubmit} className='container'>\n        <input\n          name='email'\n          type='email'\n          placeholder='Email'\n          required\n          value={email}\n          onChange={onChange}\n          className='authInput'\n        />\n        <input\n          name='password'\n          type='password'\n          placeholder='Password'\n          required\n          value={password}\n          onChange={onChange}\n          className='authInput'\n        />\n        <input\n          type='submit'\n          className='authInput authSubmit'\n          value={newAccount ? 'Create Account' : 'Log In'}\n        />\n        {error ? <span className='authError'>{error}</span> : null}\n      </form>\n      <span onClick={toggleAccount} className='authSwitch'>\n        {newAccount ? 'Log In' : 'Create Accrount'}\n      </span>\n    </>\n  )\n}\n\nexport default AuthForm\n","import React from 'react'\nimport { authService, firebaseInstance } from '../firebaseApp'\nimport AuthForm from '../components/AuthForm'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from '@fortawesome/free-brands-svg-icons'\n\nconst Auth = () => {\n  // #. 소셜 로그인 버튼\n  const onSocialClick = async (event) => {\n    const {\n      target: { name },\n    } = event\n    let provider\n    if (name === 'google') {\n      provider = new firebaseInstance.auth.GoogleAuthProvider()\n    } else if (name === 'github') {\n      provider = new firebaseInstance.auth.GithubAuthProvider()\n    }\n    await authService.signInWithPopup(provider)\n  }\n\n  return (\n    <div className='authContainer'>\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={'#04AAFF'}\n        size='3x'\n        style={{ marginBottom: 30 }}\n      />\n      <AuthForm />\n      <div className='authBtns'>\n        <button onClick={onSocialClick} name='google' className='authBtn'>\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\n        </button>\n        <button onClick={onSocialClick} name='github' className='authBtn'>\n          Continue with GitHub <FontAwesomeIcon icon={faGithub} />\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Auth\n","import React, { useState } from 'react'\nimport { dbService, storageService } from '../firebaseApp'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons'\n\nconst Tweet = ({ tweetObj, isOwner }) => {\n  // State (상태관리)\n  const [editing, setEditing] = useState(false)\n  const [newTweet, setNewTweet] = useState(tweetObj.text)\n\n  // #. Tweet 삭제\n  const onClickDel = async () => {\n    const ok = window.confirm('정말로 삭제하시겠습니까?')\n    if (ok) {\n      await dbService.doc(`tweets/${tweetObj.id}`).delete()\n      if (tweetObj.attachmentUrl !== '')\n        await storageService.refFromURL(tweetObj.attachmentUrl).delete()\n    }\n  }\n\n  // #. Edit 활성화 토글 버튼\n  const toggleEditing = () => setEditing((prev) => !prev)\n\n  // #. Edit Input 실시간 타이핑\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event\n    setNewTweet(value)\n  }\n\n  // #. Tweet Edit\n  const onSubmit = async (event) => {\n    event.preventDefault()\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\n      text: newTweet,\n    })\n    setEditing(false)\n  }\n\n  return (\n    <div className='tweet'>\n      {editing ? (\n        <>\n          {isOwner ? (\n            <>\n              <form onSubmit={onSubmit} className='container tweetEdit'>\n                <input\n                  type='text'\n                  placeholder='Edit your tweet'\n                  onChange={onChange}\n                  value={newTweet}\n                  required\n                  autoFocus\n                  className='formInput'\n                />\n                <input type='submit' value='Update Tweet' className='formBtn' />\n              </form>\n              <span onClick={toggleEditing} className='formBtn cancelBtn'>\n                Cancel\n              </span>\n            </>\n          ) : null}\n        </>\n      ) : (\n        <>\n          <h4>{tweetObj.text}</h4>\n          {tweetObj.attachmentUrl ? (\n            <img src={tweetObj.attachmentUrl} alt='With chat' />\n          ) : null}\n          {isOwner ? (\n            <div className='tweet__actions'>\n              <span onClick={onClickDel}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          ) : null}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Tweet\n","import React, { useState } from 'react'\nimport { dbService, storageService } from '../firebaseApp'\nimport { v4 as uuidv4 } from 'uuid'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\n\nconst TweetFactory = ({ userObj }) => {\n  // State (상태관리)\n  const [tweet, setTweet] = useState('')\n  const [attachment, setAttachment] = useState('')\n\n  // #. Tweet Submit\n  const onSubmit = async (event) => {\n    event.preventDefault()\n    if (tweet === '') {\n      return\n    }\n    let attachmentUrl = ''\n    if (attachment !== '') {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`)\n      const reponse = await attachmentRef.putString(attachment, 'data_url')\n      attachmentUrl = await reponse.ref.getDownloadURL()\n    }\n    const tweetInfo = {\n      text: tweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    }\n    await dbService.collection('tweets').add(tweetInfo)\n    setTweet('')\n    setAttachment('')\n  }\n\n  // #. Input Text 실시간 변경\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event\n    setTweet(value)\n  }\n\n  // #. 선택된 사진 미리보기\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event\n    const theFile = files[0]\n    const reader = new FileReader()\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent\n      setAttachment(result)\n    }\n    reader.readAsDataURL(theFile)\n  }\n\n  // #. 선택된 사진 지우기\n  const onClickClear = () => {\n    setAttachment('')\n  }\n\n  return (\n    <form onSubmit={onSubmit} className='factoryForm'>\n      <div className='factory__container'>\n        <input\n          className='factoryInput__input'\n          type='text'\n          value={tweet}\n          onChange={onChange}\n          placeholder=\"What's on your mind\"\n          maxLength={120}\n        />\n        <input type='submit' value='&rarr;' className='factoryInput__arrow' />\n      </div>\n      <label for='attach-file' className='factoryInput__label'>\n        <span>Add Photos</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n      <input\n        id='attach-file'\n        type='file'\n        accept='image/*'\n        onChange={onFileChange}\n        style={{ opacity: 0 }}\n      />\n      {attachment ? (\n        <div className='factoryForm__attachment'>\n          <img\n            src={attachment}\n            style={{ backgroundImage: attachment }}\n            alt='attached'\n          />\n          <div className='factoryForm__clear' onClick={onClickClear}>\n            <span>Remove</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      ) : null}\n    </form>\n  )\n}\n\nexport default TweetFactory\n","import React, { useEffect, useState } from 'react'\nimport Tweet from '../components/Tweet'\n\nimport { dbService } from '../firebaseApp'\nimport TweetFactory from '../components/TweetFactory'\n\nconst Home = ({ userObj }) => {\n  // State (상태관리)\n  const [tweets, setTweets] = useState([])\n\n  // Use Effect\n  useEffect(() => {\n    // #. Tweets DB에서 '실시간' 가져오기\n    dbService\n      .collection('tweets')\n      .orderBy('createdAt', 'desc')\n      .onSnapshot((snapshot) => {\n        const tweetArray = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }))\n        setTweets(tweetArray)\n      })\n  }, [])\n\n  // Return\n  return (\n    <div className='container'>\n      <TweetFactory userObj={userObj} />\n      <div style={{ marginTop: 30 }}>\n        {tweets.map((tweet) => (\n          <Tweet\n            key={tweet.id}\n            tweetObj={tweet}\n            isOwner={tweet.creatorId === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { authService } from '../firebaseApp'\n\nconst Profile = ({ userObj, refreshUser }) => {\n  // State (상태관리)\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\n\n  // #. 로그아웃\n  const history = useHistory()\n  const onLogOutClick = () => {\n    authService.signOut()\n    history.push('/')\n  }\n\n  // #. displayName 변경\n  const onSubmit = async (event) => {\n    event.preventDefault()\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      })\n      refreshUser()\n    }\n  }\n\n  // #. Input 글씨 실시간 변경\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event\n    setNewDisplayName(value)\n  }\n\n  // Return\n  return (\n    <div className='container'>\n      <form onSubmit={onSubmit} className='profileForm'>\n        <input\n          onChange={onChange}\n          type='text'\n          autoFocus\n          placeholder='Display Name'\n          value={newDisplayName}\n          className='formInput'\n        />\n        <input\n          type='submit'\n          value='Update Profile'\n          className='formBtn'\n          style={{\n            marginTop: 10,\n          }}\n        />\n      </form>\n      <span className='formBtn cancelBtn logOut' onClick={onLogOutClick}>\n        Log Out\n      </span>\n    </div>\n  )\n}\n\nexport default Profile\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\n\nconst Navigation = ({ userObj }) => {\n  return (\n    <nav>\n      <ul style={{ display: 'flex', justifyContent: 'center', marginTop: 50 }}>\n        <li>\n          <Link to='/' style={{ marginRight: 10 }}>\n            <FontAwesomeIcon icon={faTwitter} color='#04AAFF' size='2x' />\n          </Link>\n        </li>\n        <li>\n          <Link\n            to='/profile'\n            style={{\n              marginLeft: 10,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              fontSize: 12,\n            }}\n          >\n            <FontAwesomeIcon icon={faUser} color={'#04AAFF'} size='2x' />\n            <span style={{ marginTop: 10 }}>\n              {userObj.displayName\n                ? `${userObj.displayName}의 Profile`\n                : 'Profile'}\n            </span>\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Navigation\n","import React from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport Auth from '../routes/Auth'\nimport Home from '../routes/Home'\nimport Profile from '../routes/Profile'\nimport Navigation from './Navigation'\n\nconst Router = ({ isLoggedIn, userObj, refreshUser }) => {\n  return (\n    <HashRouter>\n      {isLoggedIn ? <Navigation userObj={userObj} /> : null}\n      <Switch>\n        {isLoggedIn ? (\n          <div\n            style={{\n              maxWidth: 890,\n              width: '100%',\n              margin: '0 auto',\n              marginTop: 80,\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <Route exact path='/'>\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact path='/profile'>\n              <Profile userObj={userObj} refreshUser={refreshUser} />\n            </Route>\n          </div>\n        ) : (\n          <>\n            <Route exact path='/'>\n              <Auth />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default Router\n","import React, { useEffect, useState } from 'react'\nimport { authService } from '../firebaseApp'\nimport Router from './Router'\n\nfunction App() {\n  // State (상태관리)\n  const [init, setInit] = useState(false)\n  const [userObj, setUserObj] = useState()\n\n  useEffect(() => {\n    // #. 로그인 상태 확인\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        })\n      } else {\n        setUserObj(null)\n      }\n      setInit(true)\n    })\n  }, [])\n\n  // User 상태 실시간 새로고침\n  const refreshUser = () => {\n    const user = authService.currentUser\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    })\n  }\n\n  return (\n    <>\n      {init ? (\n        <Router\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        'Initializing....'\n      )}\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './styles.css'\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}